import random

# Character class
class Character:
    def __init__(self, name, char_class, health, attack_power):
        self.name = name
        self.char_class = char_class
        self.health = health
        self.attack_power = attack_power
        self.level = 1
        self.experience = 0
        self.inventory = []
    
    def attack(self, enemy):
        damage = random.randint(self.attack_power - 2, self.attack_power + 2)
        enemy.health -= damage
        print(f"{self.name} attacks {enemy.name} for {damage} damage!")
        if enemy.health <= 0:
            print(f"{enemy.name} is defeated!")
    
    def defend(self):
        print(f"{self.name} is defending!")
        return random.randint(1, 4)  # Reduced damage

    def use_item(self, item):
        if item in self.inventory:
            print(f"{self.name} uses {item}!")
            # Apply item effects (healing, buffing, etc.)
        else:
            print("Item not found!")

    def level_up(self):
        self.level += 1
        self.attack_power += 2
        self.health += 10
        print(f"{self.name} leveled up to {self.level}!")

# Enemy class
class Enemy:
    def __init__(self, name, health, attack_power):
        self.name = name
        self.health = health
        self.attack_power = attack_power
    
    def attack(self, player):
        damage = random.randint(self.attack_power - 1, self.attack_power + 1)
        player.health -= damage
        print(f"{self.name} attacks {player.name} for {damage} damage!")

# Battle System
def battle(player, enemy):
    print(f"A wild {enemy.name} appears!")
    while player.health > 0 and enemy.health > 0:
        print(f"{player.name} - Health: {player.health}")
        print(f"{enemy.name} - Health: {enemy.health}")
        action = input("Choose action: (1) Attack, (2) Defend, (3) Use Item\n")
        
        if action == '1':
            player.attack(enemy)
        elif action == '2':
            defense = player.defend()
            damage = max(0, enemy.attack_power - defense)
            print(f"{enemy.name} attacks but {player.name} reduces damage by {defense}!")
        elif action == '3':
            player.use_item("Healing Potion")  # Example item
        
        if enemy.health > 0:
            enemy.attack(player)
    
    if player.health <= 0:
        print(f"{player.name} was defeated!")
    else:
        print(f"{player.name} won the battle!")

# Example Usage
player = Character("Hero", "Warrior", 100, 10)
enemy = Enemy("Goblin", 30, 5)

battle(player, enemy)

import random

# Define map dimensions (5x5 grid)
map_grid = [
    ["Town", "Forest", "River", "Cave", "Mountain"],
    ["Plains", "Forest", "Lake", "Ruins", "Desert"],
    ["Village", "Forest", "Road", "Swamp", "Desert"],
    ["Road", "Hill", "Fortress", "Marsh", "Canyon"],
    ["Beach", "Coast", "Cliff", "Ocean", "Island"]
]

# Player's position
player_position = [0, 0]

# Define movement directions
directions = {
    'north': [-1, 0],
    'south': [1, 0],
    'west': [0, -1],
    'east': [0, 1]
}

# Function to display the map
def display_map(position):
    print(f"You are in {map_grid[position[0]][position[1]]}")

# Function to move player
def move_player(direction):
    new_position = [
        player_position[0] + directions[direction][0],
        player_position[1] + directions[direction][1]
    ]
    
    # Check if the move is within map boundaries
    if 0 <= new_position[0] < len(map_grid) and 0 <= new_position[1] < len(map_grid[0]):
        player_position[0], player_position[1] = new_position
        display_map(player_position)
        
        # Random chance for battle (30%)
        if random.random() < 0.3:
            enemy = Enemy("Orc", 40, 7)  # Example enemy
            battle(player, enemy)
    else:
        print("You can't move in that direction!")

# Main exploration loop
def explore():
    display_map(player_position)
    while True:
        command = input("Move (north, south, east, west) or 'q' to quit: ").lower()
        if command == 'q':
            print("Exiting exploration.")
            break
        elif command in directions:
            move_player(command)
        else:
            print("Invalid command!")

# Example Usage
player = Character("Hero", "Warrior", 100, 10)
explore()

def test_battle_system():
    # Create player and enemy for testing
    test_player = Character("TestHero", "Mage", 100, 12)
    test_enemy = Enemy("TestGoblin", 50, 8)
    
    # Test player attack
    initial_enemy_health = test_enemy.health
    test_player.attack(test_enemy)
    assert test_enemy.health < initial_enemy_health, "Player attack did not reduce enemy health!"
    
    # Test enemy attack
    initial_player_health = test_player.health
    test_enemy.attack(test_player)
    assert test_player.health < initial_player_health, "Enemy attack did not reduce player health!"
    
    # Test battle win condition
    test_enemy.health = 1  # Set low health for easy defeat
    test_player.attack(test_enemy)
    assert test_enemy.health <= 0, "Enemy should have been defeated!"
    
    print("All battle system tests passed!")

# Run tests
test_battle_system()

class Quest:
    def __init__(self, quest_name, description, reward, objective):
        self.quest_name = quest_name
        self.description = description
        self.reward = reward
        self.objective = objective
        self.completed = False
    
    def check_completion(self, player):
        if self.objective(player):
            print(f"Quest '{self.quest_name}' completed!")
            player.experience += self.reward['experience']
            player.inventory.append(self.reward['item'])
            self.completed = True
        else:
            print(f"Quest '{self.quest_name}' is still incomplete.")

class NPC:
    def __init__(self, name):
        self.name = name
        self.quests = []

    def give_quest(self, quest):
        self.quests.append(quest)
        print(f"{self.name} gave you the quest: {quest.quest_name}")

    def interact(self, player):
        for quest in self.quests:
            if not quest.completed:
                print(f"{self.name}: {quest.description}")
                quest.check_completion(player)

# Example Quest and NPC
def example_quest_objective(player):
    return player.level >= 2  # Player must reach level 2 to complete the quest

npc = NPC("Old Wizard")
quest = Quest("Hero's Trial", "Prove yourself by reaching level 2.", {"experience": 50, "item": "Magic Scroll"}, example_quest_objective)

npc.give_quest(quest)
npc.interact(player)  # Interacting with NPC to check quest status

class Skill:
    def __init__(self, name, damage, mana_cost):
        self.name = name
        self.damage = damage
        self.mana_cost = mana_cost

class CharacterWithMagic(Character):
    def __init__(self, name, char_class, health, attack_power, mana):
        super().__init__(name, char_class, health, attack_power)
        self.mana = mana
        self.skills = []

    def learn_skill(self, skill):
        self.skills.append(skill)
        print(f"{self.name} learned the skill {skill.name}!")

    def cast_spell(self, skill, enemy):
        if self.mana >= skill.mana_cost:
            self.mana -= skill.mana_cost
            enemy.health -= skill.damage
            print(f"{self.name} casts {skill.name} on {enemy.name} for {skill.damage} damage!")
        else:
            print("Not enough mana to cast the spell!")

# Example Skill
fireball = Skill("Fireball", 20, 5)

# Create a Mage with magic skills
player_mage = CharacterWithMagic("Mage", "Mage", 80, 8, 20)
player_mage.learn_skill(fireball)
player_mage.cast_spell(fireball, enemy)

class StatusEffect:
    def __init__(self, name, effect_type, duration, effect_strength):
        self.name = name
        self.effect_type = effect_type
        self.duration = duration
        self.effect_strength = effect_strength

    def apply_effect(self, target):
        if self.effect_type == "poison":
            target.health -= self.effect_strength
            print(f"{target.name} is poisoned for {self.effect_strength} damage!")
        elif self.effect_type == "buff":
            target.attack_power += self.effect_strength
            print(f"{target.name}'s attack power increased by {self.effect_strength}!")
        self.duration -= 1

# Example of Poison Effect
poison = StatusEffect("Poison", "poison", 3, 5)

# Applying the effect during battle
poison.apply_effect(enemy)

